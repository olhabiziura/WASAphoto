openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://localhost:3000
    
info:
  version: 1.0.0
  title: WasaPhoto application project
  description: >-
    This document describes the API for WasaPhoto project
    
    'Keep in touch with your friends by sharing photos of special moments,
    thanks to WASAPhoto! Directly from your PC,
    you can upload your photos, and they will be visible to everyone
    who is following you.'
    
  contact:
    name: "Olha Biziura"
    email: "olhabiziura@gmail.com"
    
tags:
  - name: login
    description: Login/Sign-Up operations
  - name: user
    description: User related info
  - name: followings
    description: Followings and followers related operations
  - name: photos
    description: Photo and file upload related operations
  - name: likes
    description: Likes related operations
  - name: comments
    description: Comments related operations
  - name: bans
    description: Information about banned users
  - name: search
    description: Operations related to search

security:
  - bearerAuth: []


    
paths:
  /session:
    post:
      tags: [login]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.

      operationId: doLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                description: The response schema for a successful login
                properties:
                  message:
                    type: string
                    minLength: 3
                    maxLength: 30
                    description: Success message
                  user_id:
                    $ref: '#/components/schemas/user_id'
                  username:
                    $ref: '#/components/schemas/username'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /username:
    put:
      tags: [user]
      summary: Change User's username
      description: >
        Changes the existing username to a new one, provided that no other registered user already has this name.
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The username to change to.
              properties:
                username:
                  $ref: '#/components/schemas/username'
              required:
                - username
      responses:
        '204':
          description: Username updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Conflict. Username is already taken.
          content:
            application/json:
              schema:
                type: object
                description: Error response when username is already taken.
                properties:
                  error:
                    type: string
                    minLength: 3
                    maxLength: 30
                    example: Username is already taken.
                    description: Message indicating that the user is already being followed.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

          



  /photo:
    post:
      tags: ["photos"]
      summary: Upload Photo to a User's Feed
      operationId: uploadPhoto
      description: >
        Adds a photo to the user's profile, placing it at the top of the user's feed.
        This operation accepts both an image file and an accompanying text.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: The picture to post and its description.
              properties:
                picture:
                  $ref: '#/components/schemas/binary_image'
                description:
                  type: string
                  description: Description of the photo
                  minLength: 1
                  maxLength: 2200
                  pattern: '^[\s\S]{1,2200}$'
      responses:
        '200':
          description: Photo uploaded and added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'


    get:
      operationId: getUserFeed
      tags: [photos]
      summary: Gets a list of photos from user's feed
      description: Retrieves the photos posted in the user's feed.
      responses:
        '200':
          description: Photo feed retrieved successfully
          content:
            application/json:
              schema:
                description: Response message.
                type: object
                properties:
                  photos:
                    type: array
                    minItems: 0
                    maxItems: 300
                    description: an array of photos of user's feed.
                    items:
                      $ref: '#/components/schemas/picture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

            

    


  /deletephoto/{picture_id}:
    delete:
      operationId: deletePhoto
      tags: [photos]
      summary: Deletes a photo
      description: Deleting a photo by its ID.
      parameters:
        - in: path
          name: picture_id
          description: Id of picture to delete.
          required: true
          schema:
            $ref: '#/components/schemas/picture_id'
      responses:
        '204':
          description: The photo has been deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /like/{picture_id}:
    parameters:
      - in: path
        name: picture_id
        description: Picture id.
        required: true
        schema:
          $ref: '#/components/schemas/picture_id'
  
    post:
      tags: [likes]
      summary: Like or Unlike a Picture
      operationId: likePhoto
      description: Adds or removes a like from the specified picture.
      responses:
        '204':
          description: Like added or removed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
    delete:
      tags: [likes]
      operationId: unlikePhoto
      summary: Delete a Like from the Picture
      description: >
        Removes the like from the specified picture by the user.
      responses:
        "204":
          description: Your like was deleted.
        "400":
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
          


  /addcomment/{picture_id}:
    post:
      tags: [comments]
      operationId: commentPhoto
      summary: Add a comment to a picture
      description: Add a comment to the picture.
      parameters:
        - in: path
          name: picture_id
          description: Picture ID.
          required: true
          schema:
            $ref: '#/components/schemas/picture_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Content od the comment to post
              properties:
                text:
                  type: string
                  example: "This is a comment."
                  minLength: 1  
                  maxLength: 2200  
                  pattern: '^[\s\S]{1,2200}$'
                  description: Comment text.
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                description: Response message.
                type: object
                properties:
                  message:
                    type: string
                    minLength: 3
                    maxLength: 30
                    example: Comment added successfully
                    description: Message of successful addition.
                  comment:
                    type: object
                    description: Comment details.
                    properties:
                      username: 
                        $ref: "#/components/schemas/username"
                      owner_id:
                        $ref: "#/components/schemas/user_id"
                      content:
                        type: string
                        minLength: 0
                        maxLength: 2200
                        example: "This is a comment."
                        description: Description of the response message indicating that comment was added.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
          

  /deletecomment/{picture_id}/comment/{comment_id}:
    parameters:
      - in: path
        name: picture_id
        schema:
          $ref: '#/components/schemas/picture_id'
        required: true
        description: The unique identifier of the picture to which the comment will be added.

      - in: path
        name: comment_id
        schema:
          $ref: '#/components/schemas/comment_id'
        required: true
        description: The unique identifier of the comment to be deleted.

    delete:
      tags: [comments]
      operationId: uncommentPhoto
      summary: Delete Comment from Picture
      description: >
        Deletes a comment from the specified picture based on its comment_id, but only if UserOd coincides with the ownerId of a Picture it was put inder or a Comment. A comment_id is required since a user can leave more than one comment per post. 
      responses:
        "200":
          description: Comment was deleted successfully.
          content: {} 
        "400":
          $ref: '#/components/responses/BadRequest' 
        '500':
            $ref: '#/components/responses/InternalServerError'
          

  /follow/{user_id}:
    post:
      tags: [followings]
      summary: Follow User
      operationId: followUser
      description: Subscribes the specified user to another user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to follow.
          schema:
            $ref: '#/components/schemas/user_id'
      responses:
        "204":
          description: User subscribed successfully.
        '201':
          description: User is already being followeds.
          content:
            application/json:
              schema:
                
                type: object
                description: Message indicating that the user is already being followed.
                properties:
                  message:
                    type: string
                    minLength: 3
                    maxLength: 30
                    example: User is already being followed.
                    description: Message indicating that the user is already being followed.
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      tags: [followings]
      summary: Unsubscribe User from Another User
      operationId: unfollowUser
      description: Unsubscribes the specified user from another user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to unfollow.
          schema:
            $ref: '#/components/schemas/user_id'
      responses:
        "204":
          description: User unsubscribed successfully.
        '201':
          description: User was not following a provided account.
          content:
            application/json:
              schema:
                description: Response message.
                type: object
                properties:
                  
                  message:
                    type: string
                    minLength: 3
                    maxLength: 30
                    example: User wasn't following account.
                    description: Description of the response message indicating user wasn't following an account.
                    
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'



  /ban/{user_id}:
    parameters:
      - in: path
        name: user_id
        schema:
          $ref: '#/components/schemas/user_id'
        required: true
        description: ID of the user to be banned or unbanned.

    post:
      tags: ["bans"]
      operationId: banUser
      summary: Ban User
      description: Adds the specified user to the list of banned users.
      responses:
        "204":
          description: User banned successfully.
        '201':
          description: User is already banned.
          content:
            application/json:
              schema:
                description: Response message.
                type: object
                properties:
                  message:
                    type: string
                    minLength: 3
                    maxLength: 30
                    example: User is already banned.
                    description: Description of the response message indicating user was banned.
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: ["bans"]
      summary: Unban User
      operationId: unbanUser
      description: Removes the specified user from the list of banned users.
      responses:
        "204":
          description: User unbanned successfully.
        '201':
          description: User wasn't banned.
          content:
            application/json:
              schema:
                description: Response message.
                type: object
                properties:
                  message:
                    type: string
                    minLength: 3
                    maxLength: 30
                    example: User wasn't banned.
                    description: Description of the response message indicating user wasn't banned.
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      operationId: amIBanned
      tags: ["bans"]
      summary: Check if a user is banned
      description: Check if the user specified by the Authorization header is banned by the user specified in the path parameter.
      responses:
        '200':
          description: Successful response indicating whether the user is banned.
          content:
            application/json:
              schema:
                description: Boolean answer.
                type: object
                properties:
                  isBanned:
                    type: boolean
                    description: Indicates if the user is banned by the specified user.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []




  /profile/{user_id}:
    parameters:
      - in: path
        name: user_id
        required: true
        description: Represents user id.
        schema:
          $ref: '#/components/schemas/user_id'

    get:
      tags: ["user"]
      summary: Get User Profile
      description: Retrieves the profile information of the specified user.
      operationId: getUserProfile
      responses:
        '200':
          description: Profile information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User profile not found.
          content: {} 
        '500':
          $ref: '#/components/responses/InternalServerError'


  /stream:
    
    get:
      tags: [photos]
      operationId: getMyStream

      summary: Get User Stream
      description: |
        Retrieves a list of up to 5 pictures from each user that the authenticated user is following.
      responses:
        '201':
          description: User stream retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: Successful response containing user stream information.
                properties:
                  pictures:
                    description: a list of pictures.
                    type: array
                    minItems: 0
                    maxItems: 300
                    items:
                      $ref: '#/components/schemas/picture'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  
  
  /search:
    
    get:
      operationId: searchUser
      tags: [search]
      description: A search fot users in database.
      summary: Search users by username prefix
      parameters:
        - in: query
          name: username
          schema:
            $ref: '#/components/schemas/username'
          description: Prefix of the username to search for
      responses:
        '200':
          description: A list of users matching the username prefix
          content:
            application/json:
              schema:
                type: object
                description: Represents a list of users that match a request.
                properties:
                  users:       
                    type: array
                    description: an array of users.
                    minItems: 0
                    maxItems: 300
                    items:
                      type: object
                      description: user data.
                      properties:
                        userID:
                          $ref: "#/components/schemas/user_id"
                        username:
                           $ref: "#/components/schemas/username"

        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

components:

###################SCHEMAS####################
  schemas: 
    profile:
      description: Represents a user profile.
      type: object
      properties:
        UserID:
          $ref: "#/components/schemas/user_id"
        Username:
          $ref: "#/components/schemas/username"
        followerList:
          $ref: "#/components/schemas/user_list"
        followingList:
          $ref: "#/components/schemas/user_list"
        banList:
          $ref: "#/components/schemas/user_list"
        photoList:
          $ref: "#/components/schemas/user_feed"      

    user:
      type: object
      description: Represents a user.
      properties:
        username:
          $ref: '#/components/schemas/username'
        
        
 
    user_feed:
      title: user_feed
      description: Contains all of the pictures uploaded by user.
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: "#/components/schemas/picture"
    
    user_list:
      title: user_list
      description: this list contains all the users that I follow
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: "#/components/schemas/user_id"

    user_stream:
      title: user_stream
      description: this list contains all the photos that I follow
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: "#/components/schemas/picture"


    picture:
      type: object
      description: Represents a picture uploaded by a user.
      properties:
        PictureId:
          $ref: "#/components/schemas/picture_id"
        ownerId:
          $ref: "#/components/schemas/user_id"
        Username:
          $ref: "#/components/schemas/username"
        date:
          type: string
          minLength: 1  # minimum length should be 1 to ensure it's not empty
          maxLength: 60
          format: date-time
          description: Date and time of uploading the picture
          example: '2023-12-04T13:06:00Z'
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
        likes:
          type: array
          minItems: 0
          maxItems: 300
          items:
            $ref: '#/components/schemas/user_id'
          description: People who liked the picture
        comments:
          type: array
          minItems: 0
          maxItems: 300
          description: List of comments
          items:
            $ref: '#/components/schemas/comment'
        image:
          $ref: '#/components/schemas/binary_image'

    picture_id:
      title: picture_id
      description: "This object represents the id of the picture"
      type: string
      example: "1234"
      readOnly: true
      minLength: 1
      maxLength: 30
      pattern: '^.{1,30}$'  # Ensures at least 1 character and up to 30 characters

    user_id:
      title: user_id
      description: "This object represents the id of the user"
      type: string
      example: "user_123"
      minLength: 1
      maxLength: 30
      pattern: '^.{1,30}$'  # Ensures at least 1 character and up to 30 characters

    username:
      title: username
      description: "Username of the user"
      type: string
      example: "john_doe"
      minLength: 1
      maxLength: 30
      pattern: '^[a-zA-Z0-9_]{1,30}$'  # Allows alphanumeric characters and underscores, between 1 and 30 characters

    binary_image:
      title: binary_image
      description: Binary representation of the image
      type: string
      format: byte
      pattern: '^[a-zA-Z0-9+/]*={0,2}$'
      minLength: 1  
      maxLength: 1000000  
      example: "SGVsbG8gV29ybGQh"  

    
 
    comment:
      type: object
      properties:
        comment_id:
          $ref: '#/components/schemas/comment_id'
        OwnerId:
          $ref: '#/components/schemas/user_id'
        Content:
          $ref: '#/components/schemas/text'


    text:
      description: Comment text.
      type: string
      pattern: '^.{1,2200}$' # Ensures at least 1 character and up to 2200 characters
      minLength: 1
      maxLength: 2200
      example: "Nice shot!"
    comment_id:
      title: comment_id
      description: "Represents the ID of the comment"
      type: string
      pattern: '^.{1,30}$' # Ensures at least 1 character and up to 30 characters
      minLength: 1
      maxLength: 30
      example: "abc123"

###################RESPONSES####################

  responses:
    # 403 Forbidden
    Forbidden:
      description: Forbidden. The user does not have the necessary permissions to perform this action.
      content:
        application/json:
          schema:
            description: Error response indicating a Forbidden error.
            type: object
            properties:
              error:
                type: string
                example: "You do not have permission to access this resource."
                description: Description of the Forbidden error message.

    # 400 Bad Request
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            description: Error response indicating a Bad Request error.
            type: object
            properties:
              error:
                type: string
                example: "Invalid request parameters."
                description: Description of the Bad Request error message.

    # 401 Unauthorized
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            description: Error response indicating an Unauthorized error.
            type: object
            properties:
              error:
                type: string
                example: "Missing or invalid authorization token."
                description: Description of the Unauthorized error message.

    # 500 Internal Server Error
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            description: Error response indicating an internal server error.
            type: object
            properties:
              error:
                type: string
                example: "An internal server error occurred."
                description: Description of the Internal Server Error message.


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer