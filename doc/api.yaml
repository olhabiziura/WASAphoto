openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://localhost:3000
    
info:
  version: 1.0.0
  title: WasaPhoto application project
  description: >-
    This document describes the API for WasaPhoto project
    
    'Keep in touch with your friends by sharing photos of special moments,
    thanks to WASAPhoto! Directly from your PC,
    you can upload your photos, and they will be visible to everyone
    who is following you.'
    
  contact:
    name: "Olha Biziura"
    email: "olhabiziura@gmail.com"
    
tags:
  - name: login
    description: Login/Sign-Up operations
  - name: user
    description: User related info
  - name: followings
    description: Followings and followers related operations
  - name: photos
    description: Photo and file upload related operations
  - name: likes
    description: Likes related operations
  - name: comments
    description: Comments related operations
  - name: bans
    description: Information about banned users
  - name: search
    description: Operations related to search

security:
  - bearerAuth: []


    
paths:
  /session:
    post:
      tags: [login]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.

      operationId: doLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  user_id:
                    type: string
                    description: The ID of the logged-in user
                  username:
                    type: string
                    description: The username of the logged-in user
        '400':
          description: Bad request. Invalid username or missing username in request body.
        '401':
          description: Unauthorized. Failed to authenticate user.
        '500':
          description: Internal server error. Failed to process the login request.



  /username:
    put:
      tags: [user]
      summary: Change User's username
      description: >
        Changes the existing username to a new one, provided that no other registered user already has this name.
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
      responses:
        '204':
          description: Username updated successfully
        '400':
          description: Bad request. Invalid or missing username in request body.
        '401':
          description: Unauthorized. Missing authorization header.
        '409':
          description: Conflict. Username is already taken.
        '500':
          description: Internal server error. Failed to process the username update request.

          



  /photo:
    post:
      tags: ["photos"]
      summary: Upload Photo to a User's Feed
      operationId: uploadPhoto
      description: >
        Adds a photo to the user's profile, placing it at the top of the user's feed.
        This operation accepts both an image file and an accompanying text.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
                description:
                  type: string
                  description: Description of the photo
      responses:
        '200':
          description: Photo uploaded and added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
        '400':
          description: Bad request. Missing required parameters or failed to parse multipart form.
        '401':
          description: Unauthorized. Missing authorization header.
        '500':
          description: Internal server error. Failed to upload or add photo.




    get:
      operationId: getUserFeed
      tags: [photos]
      summary: Gets a list of photos from user's feed
      responses:
        '200':
          description: Photo feed retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
        '400':
          description: Bad request. Missing authorization header.
        '401':
          description: Unauthorized. Missing or invalid authorization token.
        '500':
          description: Internal server error. Failed to retrieve photo feed.

            

    


  /deletephoto/{pictureID}:
    delete:
      operationId: deletePhoto
      tags:
        - photos
      summary: Deletes a photo
      description: Deleting a photo by its ID.
      parameters:
        - in: path
          name: pictureID
          required: true
          schema:
            $ref: '#/components/schemas/picture_id'
      responses:
        '204':
          description: The photo has been deleted successfully
        '400':
          description: The request was not valid. Can be invalid user_id or picture_id.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /like/{PictureID}:
    parameters:
      - in: path
        name: PictureID
        required: true
        schema:
          type: string
          example: "123456789"  # Replace with actual example if needed
        description: The unique ID of the picture to be liked or unliked.

    post:
      tags: [likes]
      summary: Like or Unlike a Picture
      operationId: likePhoto
      description: Adds or removes a like from the specified picture.
      responses:
        '204':
          description: Like added or removed successfully
        '400':
          description: Bad request. Missing required parameters or invalid input.
        '401':
          description: Unauthorized. Missing authorization header or invalid credentials.
        '500':
          description: Internal server error. Failed to process the like operation.


    delete:
      tags: [likes]
      operationId: unlikePhoto
      summary: Delete a Like from the Picture
      description: >
        Removes the like from the specified picture by the user.
      responses:
        "204":
          description: Your like was deleted.
        "400":
          description: Bad Request. No previous like on this picture or the action is not valid.
          content:
            application/json: {} 
        '500':
            $ref: '#/components/responses/InternalServerError'
          


  /addcomment/{pictureID}:
    post:
      tags: [comments]
      operationId: commentPhoto
      summary: Add a comment to a picture
      parameters:
        - in: path
          name: pictureID
          required: true
          schema:
            type: string
          description: The ID of the picture to add a comment to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "This is a comment."
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment added successfully
                  comment:
                    type: object
                    properties:
                      ownerID:
                        type: string
                        example: "user123"
                      content:
                        type: string
                        example: "This is a comment."
        '400':
          description: Bad request. Missing required parameters or empty comment text.
        '401':
          description: Unauthorized. Missing authorization header.
        '500':
          description: Internal server error. Failed to add a comment.
          

  /deletecomment/{PictureID}/{CommentID}:
    parameters:
      - in: path
        name: PictureID
        schema:
          $ref: '#/components/schemas/picture_id'
        required: true
        description: The unique identifier of the picture to which the comment will be added.

      - in: path
        name: CommentID
        schema:
          $ref: '#/components/schemas/comment_id'
        required: true
        description: The unique identifier of the comment to be deleted.

    delete:
      tags: [comments]
      operationId: uncommentPhoto
      summary: Delete Comment from Picture
      description: >
        Deletes a comment from the specified picture based on its CommentID, but only if UserOd coincides with the ownerId of a Picture it was put inder or a Comment. A CommentID is required since a user can leave more than one comment per post. 
      responses:
        "200":
          description: Comment was deleted successfully.
        "400":
          description: Bad Request. The comment does not belong to the user or is not valid.
          content:
            application/json: {} 
        '500':
            $ref: '#/components/responses/InternalServerError'
          

  /follow/{userID}:
    post:
      tags: [followings]
      summary: Follow User
      operationId: followUser
      description: Subscribes the specified user to another user.
      parameters:
        - name: userID
          in: path
          required: true
          description: The ID of the user to follow.
          schema:
            $ref: '#/components/schemas/user_id'
      responses:
        "204":
          description: User subscribed successfully.
        "201":
          description: User is already being followed.
          content:
            application/json: {}
        "400":
          description: Bad Request. The request is malformed, or the target user does not exist.
          content:
            application/json: {}
        "500":
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      tags: [followings]
      summary: Unsubscribe User from Another User
      operationId: unfollowUser
      description: Unsubscribes the specified user from another user.
      parameters:
        - name: userID
          in: path
          required: true
          description: The ID of the user to unfollow.
          schema:
            $ref: '#/components/schemas/user_id'
      responses:
        "204":
          description: User unsubscribed successfully.
        "201":
          description: User wasn't following the provided user.
          content:
            application/json: {}
        "400":
          description: Bad Request. The request is malformed or the user to be unfollowed does not exist.
          content:
            application/json: {}
        "500":
          $ref: '#/components/responses/InternalServerError'



  /ban/{userID}:
    parameters:
      - in: path
        name: userID
        schema:
          $ref: '#/components/schemas/user_id'
        required: true
        description: ID of the user to be banned or unbanned.

    post:
      tags: ["ban"]
      operationId: banUser
      summary: Ban User
      description: Adds the specified user to the list of banned users.
      responses:
        "204":
          description: User banned successfully.
        "201":
          description: User is already banned.
          content:
            application/json: {}
        "400":
          description: Bad Request. No user provided or the request is malformed.
          content:
            application/json: {}
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: ["ban"]
      summary: Unban User
      operationId: unbanUser
      description: Removes the specified user from the list of banned users.
      responses:
        "204":
          description: User unbanned successfully.
        "201":
          description: User was not banned.
          content:
            application/json: {}
        "400":
          description: Bad Request. The request is malformed.
          content:
            application/json: {}
        "500":
          $ref: '#/components/responses/InternalServerError'





    get:
      summary: Check if a user is banned
      description: Check if the user specified by the Authorization header is banned by the user specified in the path parameter.
      responses:
        '200':
          description: Successful response indicating whether the user is banned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isBanned:
                    type: boolean
                    description: Indicates if the user is banned by the specified user.
        '400':
          description: Bad Request - Missing or invalid Authorization header or userID parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing what went wrong.
        '500':
          description: Internal Server Error - An error occurred while checking the ban status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing what went wrong.
      security:
        - bearerAuth: []




  /profile/{UserID}:
    parameters:
      - in: path
        name: UserID
        required: true
        schema:
          type: string
          example: "123456789"  # Replace with actual example if needed
        description: The unique ID of the user whose profile is to be retrieved.

    get:
      tags: ["user"]
      summary: Get User Profile
      description: Retrieves the profile information of the specified user.
      operationId: getUserProfile
      responses:
        '200':
          description: Profile information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad request. Missing required parameters.
        '401':
          description: Unauthorized. Missing authorization header.
        '404':
          description: User profile not found.
        '500':
          description: Internal server error. Failed to retrieve profile information.


  /stream:
    get:
      operationId: getMyStream
      tags:
        - user
      summary: Get User Stream
      description: |
        Retrieves a list of up to 5 pictures from each user that the authenticated user is following.
      responses:
        '200':
          description: User stream retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
        '400':
          description: Bad request. Missing authorization header.
        '401':
          description: Unauthorized. Missing or invalid authorization token.
        '500':
          description: Internal server error. Failed to retrieve user stream.


  /search:
    get:
      summary: Search users by username prefix
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: Prefix of the username to search for
      responses:
        '200':
          description: A list of users matching the username prefix
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: string
                      description: The unique identifier of the user
                    username:
                      type: string
                      description: The username of the user
        '400':
          description: Invalid request parameters
        '500':
          description: Internal server error
      security:
        - bearerAuth: []

components:

###################SCHEMAS####################
  schemas: 
    Profile:
      type: object
      properties:
        UserID:
          $ref: "#/components/schemas/user_id"
        Username:
          $ref: "#/components/schemas/username"
        followerList:
          $ref: "#/components/schemas/user_list"
        followingList:
          $ref: "#/components/schemas/user_list"
        banList:
          $ref: "#/components/schemas/user_list"
        photoList:
          $ref: "#/components/schemas/user_feed"      
      required:  
        - id
        - username
    User:
      type: object
      properties:
        Username:
          type: string
          description: The username of the user trying to log in

        
          
    user_id:
      description: User's personal and unique id, or identification.
      type: string
      example: '13467'
      minLength: 3
      maxLength: 16

    username:
      title: username
      description: Username of the user, must be unique.
      type: string
      pattern: '^.*?$'
      example: JohnyDoe
      minLength: 3
      maxLength: 16
      

    BinaryImage:
      description: Binary image.
      type: string
      format: binary
      minLength: 4
      maxLength: 65535
      example: iVBORw0KGgoAAAANSU... 
 
    user_feed:
      title: user_feed
      description: Contains all of the pictures uploaded by user.
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: "#/components/schemas/Picture"
    
    user_list:
      title: user_list
      description: this list contains all the users that I follow
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: "#/components/schemas/user_id"

    user_stream:
      title: user_stream
      description: this list contains all the photos that I follow
      type: array
      minItems: 0
      maxItems: 100
      items:
        $ref: "#/components/schemas/Picture"


    Picture:
      type: object
      properties:
        PictureId:
          $ref: "#/components/schemas/picture_id"
        ownerId:
          $ref: "#/components/schemas/user_id"
        Username:
          $ref: "#/components/schemas/username"
        date:
          type: string
          format: date-time
          description: Date and time of uploading the picture
          example: '12/04/2023-13:06'
        likes:
          type: array
          items: 
            $ref: '#/components/schemas/user_id'
          description: People who liked the picture
        comments:
          type: array
          items: 
            $ref: '#/components/schemas/Comment'
        image:
          type: string
          format: byte
          description: Base64 encoded image data
      required:
        - PictureId
        - ownerId

    picture_id:
      title: picture_id
      description: "This object represents the id of the picture"
      type: string
      example: "1234"
      readOnly: true
    
    
 
    Comment:
      type: object
      properties:
        CommentID:
          $ref: '#/components/schemas/comment_id'
        OwnerId:
          $ref: '#/components/schemas/user_id'
        Content:
          $ref: '#/components/schemas/text'
      required:
        - CommentID
        - ownerId
        - Content

    text:
      description: Comment text.
      type: string
      pattern: '^.*?$'
      minLength: 1
      maxLength: 2200
      example: "Nice shot!"

    comment_id:
      title: comment_id
      description: "represents the id of the comment"
      type: number
      format: int64
      example: 1234
      readOnly: true

###################RESPONSES####################

  responses:
      #401
    Unauthorized:
      description: The request was not authorized. The user must log in.
  
      #403
    Forbidden:
      description: The request was not authorized. The user does not have the necessary permissions.
  
      #500
    InternalServerError:
      description: An error occurred on the server. Please try again later.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer